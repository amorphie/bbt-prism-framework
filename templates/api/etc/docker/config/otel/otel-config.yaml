# Configure receivers
# We only need otlp protocol on grpc, but you can use http, zipkin, jaeger, aws, etc.
# https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318  

# Configure exporters
exporters:
  otlp:
    endpoint: otelcol:4317
    
# Export prometheus endpoint
#  prometheus:
#    endpoint: "0.0.0.0:8889"
  
  elasticsearch:
    index: "bbt-template"
    endpoints: [ "http://bbt-elastic:9200" ]
    tls:
        insecure: true
      
  otlp/elastic:
    endpoint: "bbt-apm:8200"
    tls:
      insecure: true
    
#  zipkin:
#    endpoint: localhost:9411
#    tls:
#      insecure: true

  # log to the console
  logging:

# Export to a file
#  file:
#    path: /etc/output/logs.json

# Configure processors (batch, sampling, filtering, hashing sensitive data, etc.)
# https://opentelemetry.io/docs/collector/configuration/#processors
processors:
  batch:

# Configure pipelines. Pipeline defines a path the data follows in the Collector
# starting from reception, then further processing or modification and finally
# exiting the Collector via exporters.
# https://opentelemetry.io/docs/collector/configuration/#service
# https://github.com/open-telemetry/opentelemetry-collector/blob/main/docs/design.md#pipelines
service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [logging, otlp/elastic]
    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [logging, otlp/elastic]
    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [logging, elasticsearch]